name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

jobs:
  flake8:
    name: Flake8 and Tests
    runs-on: ubuntu-latest
    # services:
    #   # Label used to access the service container
    #   mystique_postgres:
    #       # Docker Hub image
    #       image: postgres:12
    #       # Provide the password for postgres
    #       env:
    #           POSTGRES_PASSWORD: zapay
    #           POSTGRES_USER: zapay
    #           POSTGRES_DB: mystique_db
    #       # Set port
    #       ports:
    #           - 5432:5432
    #       # Set health checks to wait until postgres has started
    #       options: >-
    #           --health-cmd pg_isready
    #           --health-interval 10s
    #           --health-timeout 5s
    #           --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2  # Update with your python version
      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: /opt/hostedtoolcache/Python/3.10.2/x64/
          # Look to see if there is a cache hit for the corresponding requirements file
          key: python3.10.2-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: python3 -m pip install -r requirements.txt
      - name: Flake8
        run: python3 -m flake8
      # - name: Setup DynamoDB Local
      #   uses: rrainn/dynamodb-action@v2.0.0
      #   with:
      #     port: 8000
      #     cors: "*"
      - name: Tests
        # env:
        #   DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_DEVELOPMENT }}
        #   POSTGRES_HOST: localhost
        #   POSTGRES_PORT: ${{ job.services.fleetmanager_postgres.ports[5432] }} # get randomly assigned published port
        #   PYTEST_RUNNING_GITHUB: 1
        #   DYNAMODB_URL: http://localhost:8000
        run: |
            pytest src --cov
      #      echo Installing Doppler
      #      (curl -Ls https://cli.doppler.com/install.sh || wget -qO- https://cli.doppler.com/install.sh) | sudo bash
      #      echo Doppler Installed
      #      doppler run -- pytest src --cov

  # push_production_sandbox_docker:
  #       name: PUSH Sandbox and Production Docker Image
  #       runs-on: ubuntu-latest
  #       needs: build_and_test
  #       if: github.ref == 'refs/heads/master'
  #       steps:
  #           - name: Check out the repo
  #             uses: actions/checkout@v2
  #             with:
  #               fetch-depth: 0
  #           - name: Log in to Docker Hub
  #             uses: docker/login-action@v1
  #             with:
  #                 username: ${{ secrets.DOCKER_USER }}
  #                 password: ${{ secrets.DOCKER_PASSWORD }}
  #           - name: Push to Docker Hub
  #             uses: docker/build-push-action@v2
  #             with:
  #                 push: true
  #                 tags: zapay/bifrost:production
  #                 context: .

  #   deploy_production:
  #       name: Deploy Production
  #       runs-on: ubuntu-latest
  #       needs: push_production_sandbox_docker
  #       if: github.ref == 'refs/heads/master'
  #       steps:
  #           - name: Checkout
  #             uses: actions/checkout@v2
  #           - name: Deploy Production
  #             uses: zapay-pagamentos/restart-kubectl@v0
  #             with:
  #                 namespace: production-lambda
  #                 deployment: bifrost
  #             env:
  #                 AWS_ACCESS_KEY_ID: ${{ secrets.K8S_AWS_ACCESS_KEY_ID }}
  #                 AWS_SECRET_ACCESS_KEY: ${{ secrets.K8S_AWS_SECRET_ACCESS_KEY }}
  #                 KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

  #   deploy_sandbox:
  #       name: Deploy Sandbox
  #       runs-on: ubuntu-latest
  #       needs: push_production_sandbox_docker
  #       if: github.ref == 'refs/heads/master'
  #       steps:
  #           - name: Checkout
  #             uses: actions/checkout@v2
  #           - name: Deploy Sandbox
  #             uses: zapay-pagamentos/restart-kubectl@v0
  #             with:
  #                 namespace: sandbox
  #                 deployment: bifrost
  #             env:
  #                 AWS_ACCESS_KEY_ID: ${{ secrets.K8S_AWS_ACCESS_KEY_ID }}
  #                 AWS_SECRET_ACCESS_KEY: ${{ secrets.K8S_AWS_SECRET_ACCESS_KEY }}
  #                 KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
